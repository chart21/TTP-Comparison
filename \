//server (TTP) code
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <pthread.h>
#include "programs.hpp"
#include "networking.hpp"
#include "sockethelper.h"
void receiveInputFromNetwork(std::vector<DATATYPE> inputs, int playerID)
{

}

void readInputFromFile(std::vector<DATATYPE> inputs,int playerID)
{
    std::ifstream playerinput("Player-Data/Input-P" + std::to_string(playerID) + "-0");
    if (!playerinput.is_open())
        std::cout << "Error reading from file";

    DATATYPE single_input;
    while (playerinput >> single_input)
    {
       inputs.push_back(single_input);          
    }
    playerinput.close();
}


int main()
{
pthread_t threads[input_players];
thargs_t thrgs[input_players];
int ret;
printf("creating receiving servers\n");
for(int t=0;t<input_players;t++) {
    thrgs[t].threadID = t;
    thrgs[t].client = (char*)"client";
    thrgs[t].hostname = (char*)"hostname";
    std::cout << "In main: creating thread " << t << "\n";
    ret = pthread_create(&threads[t], NULL, receiver, &thrgs[t]);
    if (ret){
        printf("ERROR; return code from pthread_create() is %d\n", ret);
        exit(-1);
        }
}

// waiting until all threads connected
while (num_successful_connections < (input_players -1)) {
pthread_cond_wait(&cond_successful_connection, &mtx_connection_established);
}
pthread_mutex_destroy(&mtx_connection_established);
pthread_cond_destroy(&cond_successful_connection);
}
std::vector<DATATYPE> inputs[input_players];    
// read inputs of player 0
readInputFromFile(inputs[0],0);



for(int t=1;t<input_players;t++) {
receiveInputFromNetwork(inputs[t],t);
}

// receive inputs of the other players
/* for(int i = 1; i < input_players; i++) */
/*    inputs[i] = receiveInputFrom(i,inputs,numInputs); */

/* inputs = receiveInputs() */

performFunction(inputs);

return 0;
}
